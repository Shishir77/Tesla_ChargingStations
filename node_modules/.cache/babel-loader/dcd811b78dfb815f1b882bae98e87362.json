{"ast":null,"code":"import { useRef, useState } from 'react';\nimport Supercluster from 'supercluster';\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect';\nimport { dequal } from 'dequal';\n\nvar useSupercluster = function useSupercluster(_ref) {\n  var points = _ref.points,\n      bounds = _ref.bounds,\n      zoom = _ref.zoom,\n      options = _ref.options;\n  var superclusterRef = useRef();\n  var pointsRef = useRef();\n\n  var _useState = useState([]),\n      clusters = _useState[0],\n      setClusters = _useState[1];\n\n  var zoomInt = Math.round(zoom);\n  useDeepCompareEffectNoCheck(function () {\n    if (!superclusterRef.current || !dequal(pointsRef.current, points) || !dequal(superclusterRef.current.options, options)) {\n      superclusterRef.current = new Supercluster(options);\n      superclusterRef.current.load(points);\n    }\n\n    if (bounds) {\n      setClusters(superclusterRef.current.getClusters(bounds, zoomInt));\n    }\n\n    pointsRef.current = points;\n  }, [points, bounds, zoomInt, options]);\n  return {\n    clusters: clusters,\n    supercluster: superclusterRef.current\n  };\n};\n\nexport default useSupercluster;","map":{"version":3,"mappings":";;;;;AAaA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB;MAItBC;MACAC;MACAC;MACAC;AAEA,MAAMC,eAAe,GAAGC,MAAM,EAA9B;AACA,MAAMC,SAAS,GAAGD,MAAM,EAAxB;;AACA,kBAAgCE,QAAQ,CAEtC,EAFsC,CAAxC;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AAGA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAALD,CAAWT,IAAXS,CAAhB;AAEAE,6BAA2B,CAAC;AAC1B,QACE,CAACT,eAAe,CAACU,OAAjB,IACA,CAACC,MAAM,CAACT,SAAS,CAACQ,OAAX,EAAoBd,MAApB,CADP,IAEA,CAACe,MAAM,CACJX,eAAe,CAACU,OAAhBV,CAEED,OAHE,EAILA,OAJK,CAHT,EASE;AACAC,qBAAe,CAACU,OAAhBV,GAA0B,IAAIY,YAAJ,CAAiBb,OAAjB,CAA1BC;AACAA,qBAAe,CAACU,OAAhBV,CAAwBa,IAAxBb,CAA6BJ,MAA7BI;AACD;;AAED,QAAIH,MAAJ,EAAY;AACVQ,iBAAW,CAACL,eAAe,CAACU,OAAhBV,CAAwBc,WAAxBd,CAAoCH,MAApCG,EAA4CM,OAA5CN,CAAD,CAAXK;AACD;;AAEDH,aAAS,CAACQ,OAAVR,GAAoBN,MAApBM;AAnByB,KAoBxB,CAACN,MAAD,EAASC,MAAT,EAAiBS,OAAjB,EAA0BP,OAA1B,CApBwB,CAA3BU;AAsBA,SAAO;AAAEL,YAAQ,EAARA,QAAF;AAAYW,gBAAY,EAAEf,eAAe,CAACU;AAA1C,GAAP;AAtCF","names":["useSupercluster","points","bounds","zoom","options","superclusterRef","useRef","pointsRef","useState","clusters","setClusters","zoomInt","Math","round","useDeepCompareEffectNoCheck","current","dequal","Supercluster","load","getClusters","supercluster"],"sources":["C:\\Users\\16822\\Desktop\\Final Semester\\Senior Design\\TeslaChargingStation\\my-app\\node_modules\\use-supercluster\\src\\index.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport Supercluster from \"supercluster\";\nimport { BBox, GeoJsonProperties } from \"geojson\";\nimport { useDeepCompareEffectNoCheck } from \"use-deep-compare-effect\";\nimport { dequal } from \"dequal\";\n\nexport interface UseSuperclusterArgument<P, C> {\n  points: Array<Supercluster.PointFeature<P>>;\n  bounds?: BBox;\n  zoom: number;\n  options?: Supercluster.Options<P, C>;\n}\n\nconst useSupercluster = <\n  P extends GeoJsonProperties = Supercluster.AnyProps,\n  C extends GeoJsonProperties = Supercluster.AnyProps\n>({\n  points,\n  bounds,\n  zoom,\n  options\n}: UseSuperclusterArgument<P, C>) => {\n  const superclusterRef = useRef<Supercluster<P, C>>();\n  const pointsRef = useRef<Array<Supercluster.PointFeature<P>>>();\n  const [clusters, setClusters] = useState<\n    Array<Supercluster.ClusterFeature<C> | Supercluster.PointFeature<P>>\n  >([]);\n  const zoomInt = Math.round(zoom);\n\n  useDeepCompareEffectNoCheck(() => {\n    if (\n      !superclusterRef.current ||\n      !dequal(pointsRef.current, points) ||\n      !dequal(\n        (superclusterRef.current as typeof superclusterRef.current & {\n          options: typeof options;\n        }).options,\n        options\n      )\n    ) {\n      superclusterRef.current = new Supercluster(options);\n      superclusterRef.current.load(points);\n    }\n\n    if (bounds) {\n      setClusters(superclusterRef.current.getClusters(bounds, zoomInt));\n    }\n\n    pointsRef.current = points;\n  }, [points, bounds, zoomInt, options]);\n\n  return { clusters, supercluster: superclusterRef.current };\n};\n\nexport default useSupercluster;\n"]},"metadata":{},"sourceType":"module"}